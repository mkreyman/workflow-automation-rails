.step(data-title='Introduction')
  :markdown
    ## Workflow Automation - Vacation Rental example

    ![Airtng](http://howtodocs.s3.amazonaws.com/airtng-screen.png)

  a.btn(href="http://airtng-wa.herokuapp.com") View a demo
  :markdown
    At its core this use-case is about enabling your service providers (agents, hosts, customer service reps, administrators, etc) to better serve their customer. To illustrate a very real-world example of this use-case we will implement a webapp for finding and booking vacation properties--we're calling it Airtng. Here's how it works:

    1. A host creates a vacation property

    1. A guest requests a reservation on that property

    1. The host receives an SMS notifying them of the recent reservation request. The host can either Accept or Reject the reservation.

    1. The guest is notified that their reservation was either accepted or rejected.

    ## Building Blocks

    We'll be using the Twilio REST API to implement this use-case:

    * [Messages Resource](/docs/api/rest/sending-sms): We will use Twilio directly to send our users messages at important junctures.

    Let's get started! Click the right arrow to move on to the next step of the tutorial.

.step(data-title="Preconditions", data-file="config/routes.rb")
  :markdown
    ## Pre-conditions

    In this tutorial we will cover the specific use-case of triggering a workflow processs using SMS. There are some core concepts we will not be covering that are implied in the architecture of this app. Some of these are:

    * The Rails session object
    * Basic user authentication in Rails
    * Rails resources and CRUD
    * Using the Rails generator
    * Active Record querying
    * Rails routing (shown to the right)

    Don't worry if any of this is unfamiliar. You can do a read through and then brush up on these concepts afterwards. All of the core practices necessary to implement workflow automation will be covered. Onward!

.step(data-title="About This Tutorial")
  :markdown
    ## About This Tutorial

    In this tutorial, we will work through a series of [user stories](http://en.wikipedia.org/wiki/User_story) that describe how to fully implement an automated workflow in a web application. Our team implemented this example application in about 12 story points (roughly equivalent to 12 working hours).

    This project also has a user authentication system in place, but since we covered that topic extensively in the [Two-Factor Authentication](https://www.twilio.com/docs/howto/walkthrough/two-factor-authentication/ruby/rails) and [Account Verification](https://www.twilio.com/docs/howto/walkthrough/account-verification/ruby/rails) tutorials we won't discuss it here.

    Let's get started with our first user story - creating a new vacation property.


.step(data-title='The Vacation Property')
  h3 User Story 1:
  blockquote As a Host I want to create a vacation rental property.
  
  :markdown
    In order to build a true vacation rentals company we'll need a way to create the property listings. This story requires that we build a user interface and a model to create and save a new `VacationProperty` in our system. Here's what we will need to add:

    * A form to enter details about the new property

    * A route and controller function on the server to render the form 

    * A route and controller function on the server to handle the form's POST request

    * A persistent `VacationProperty` model object to store information about the property

    We're not going to spend to much time on this step in order to focus on the actual reservation workflow. But before we do let's take a quick look at the `VacationProperty` model.


.step(data-title='Vacation Property Model', data-file='app/models/vacation_property.rb')
  :markdown
    ## Vacation Property

    The `VacationProperty` model belongs to the `User` who created it (we'll call this user the _host_ moving forward) and contains only two properties: a `description` and an `image_url`. 

    It has two [associations](http://guides.rubyonrails.org/association_basics.html) in that it has many reservations and therefore many users through those reservations.

    The best way to generate the model and all of the basic [CRUD scaffolding](http://rubysnippets.com/2012/12/14/scaffolding-in-rails/) we'll need, is to use the [Rails command line](http://guides.rubyonrails.org/command_line.html) tool:
    ```
    bin/rails generate scaffold VacationProperty 
    description:string image_url:string
    ```

    One of the benefits of using the Rails generator is that it creates all of our routes, controllers and views so that we have a fully functional CRUD interface out of the box.

    This is pretty boilerplate so far, which means it's time to jump into the stew and see how we are handling the workflow.